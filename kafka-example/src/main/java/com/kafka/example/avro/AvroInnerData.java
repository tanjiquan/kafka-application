/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafka.example.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroInnerData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9140525994737121381L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroInnerData\",\"namespace\":\"com.tt.kafka.example.avro\",\"fields\":[{\"name\":\"dataId\",\"type\":\"int\"},{\"name\":\"dataCommit\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroInnerData> ENCODER =
      new BinaryMessageEncoder<AvroInnerData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroInnerData> DECODER =
      new BinaryMessageDecoder<AvroInnerData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroInnerData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroInnerData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroInnerData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroInnerData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroInnerData from a ByteBuffer. */
  public static AvroInnerData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int dataId;
  @Deprecated public java.lang.CharSequence dataCommit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroInnerData() {}

  /**
   * All-args constructor.
   * @param dataId The new value for dataId
   * @param dataCommit The new value for dataCommit
   */
  public AvroInnerData(java.lang.Integer dataId, java.lang.CharSequence dataCommit) {
    this.dataId = dataId;
    this.dataCommit = dataCommit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dataId;
    case 1: return dataCommit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dataId = (java.lang.Integer)value$; break;
    case 1: dataCommit = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dataId' field.
   * @return The value of the 'dataId' field.
   */
  public java.lang.Integer getDataId() {
    return dataId;
  }

  /**
   * Sets the value of the 'dataId' field.
   * @param value the value to set.
   */
  public void setDataId(java.lang.Integer value) {
    this.dataId = value;
  }

  /**
   * Gets the value of the 'dataCommit' field.
   * @return The value of the 'dataCommit' field.
   */
  public java.lang.CharSequence getDataCommit() {
    return dataCommit;
  }

  /**
   * Sets the value of the 'dataCommit' field.
   * @param value the value to set.
   */
  public void setDataCommit(java.lang.CharSequence value) {
    this.dataCommit = value;
  }

  /**
   * Creates a new AvroInnerData RecordBuilder.
   * @return A new AvroInnerData RecordBuilder
   */
  public static AvroInnerData.Builder newBuilder() {
    return new AvroInnerData.Builder();
  }

  /**
   * Creates a new AvroInnerData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroInnerData RecordBuilder
   */
  public static AvroInnerData.Builder newBuilder(AvroInnerData.Builder other) {
    return new AvroInnerData.Builder(other);
  }

  /**
   * Creates a new AvroInnerData RecordBuilder by copying an existing AvroInnerData instance.
   * @param other The existing instance to copy.
   * @return A new AvroInnerData RecordBuilder
   */
  public static AvroInnerData.Builder newBuilder(AvroInnerData other) {
    return new AvroInnerData.Builder(other);
  }

  /**
   * RecordBuilder for AvroInnerData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroInnerData>
    implements org.apache.avro.data.RecordBuilder<AvroInnerData> {

    private int dataId;
    private java.lang.CharSequence dataCommit;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(AvroInnerData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dataId)) {
        this.dataId = data().deepCopy(fields()[0].schema(), other.dataId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dataCommit)) {
        this.dataCommit = data().deepCopy(fields()[1].schema(), other.dataCommit);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroInnerData instance
     * @param other The existing instance to copy.
     */
    private Builder(AvroInnerData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.dataId)) {
        this.dataId = data().deepCopy(fields()[0].schema(), other.dataId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.dataCommit)) {
        this.dataCommit = data().deepCopy(fields()[1].schema(), other.dataCommit);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'dataId' field.
      * @return The value.
      */
    public java.lang.Integer getDataId() {
      return dataId;
    }

    /**
      * Sets the value of the 'dataId' field.
      * @param value The value of 'dataId'.
      * @return This builder.
      */
    public AvroInnerData.Builder setDataId(int value) {
      validate(fields()[0], value);
      this.dataId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'dataId' field has been set.
      * @return True if the 'dataId' field has been set, false otherwise.
      */
    public boolean hasDataId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'dataId' field.
      * @return This builder.
      */
    public AvroInnerData.Builder clearDataId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataCommit' field.
      * @return The value.
      */
    public java.lang.CharSequence getDataCommit() {
      return dataCommit;
    }

    /**
      * Sets the value of the 'dataCommit' field.
      * @param value The value of 'dataCommit'.
      * @return This builder.
      */
    public AvroInnerData.Builder setDataCommit(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.dataCommit = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'dataCommit' field has been set.
      * @return True if the 'dataCommit' field has been set, false otherwise.
      */
    public boolean hasDataCommit() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'dataCommit' field.
      * @return This builder.
      */
    public AvroInnerData.Builder clearDataCommit() {
      dataCommit = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroInnerData build() {
      try {
        AvroInnerData record = new AvroInnerData();
        record.dataId = fieldSetFlags()[0] ? this.dataId : (java.lang.Integer) defaultValue(fields()[0]);
        record.dataCommit = fieldSetFlags()[1] ? this.dataCommit : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroInnerData>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroInnerData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroInnerData>
    READER$ = (org.apache.avro.io.DatumReader<AvroInnerData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

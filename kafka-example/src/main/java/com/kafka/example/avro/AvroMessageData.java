/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafka.example.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroMessageData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4576340650469075307L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroMessageData\",\"namespace\":\"com.tt.kafka.example.avro\",\"fields\":[{\"name\":\"sendTime\",\"type\":\"long\"},{\"name\":\"recordID\",\"type\":\"string\"},{\"name\":\"sendIp\",\"type\":\"string\"},{\"name\":\"datas\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AvroInnerData\",\"fields\":[{\"name\":\"dataId\",\"type\":\"int\"},{\"name\":\"dataCommit\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroMessageData> ENCODER =
      new BinaryMessageEncoder<AvroMessageData>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroMessageData> DECODER =
      new BinaryMessageDecoder<AvroMessageData>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroMessageData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroMessageData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroMessageData>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroMessageData to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroMessageData from a ByteBuffer. */
  public static AvroMessageData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long sendTime;
  @Deprecated public java.lang.CharSequence recordID;
  @Deprecated public java.lang.CharSequence sendIp;
  @Deprecated public java.util.List<AvroInnerData> datas;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroMessageData() {}

  /**
   * All-args constructor.
   * @param sendTime The new value for sendTime
   * @param recordID The new value for recordID
   * @param sendIp The new value for sendIp
   * @param datas The new value for datas
   */
  public AvroMessageData(java.lang.Long sendTime, java.lang.CharSequence recordID, java.lang.CharSequence sendIp, java.util.List<AvroInnerData> datas) {
    this.sendTime = sendTime;
    this.recordID = recordID;
    this.sendIp = sendIp;
    this.datas = datas;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sendTime;
    case 1: return recordID;
    case 2: return sendIp;
    case 3: return datas;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sendTime = (java.lang.Long)value$; break;
    case 1: recordID = (java.lang.CharSequence)value$; break;
    case 2: sendIp = (java.lang.CharSequence)value$; break;
    case 3: datas = (java.util.List<AvroInnerData>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sendTime' field.
   * @return The value of the 'sendTime' field.
   */
  public java.lang.Long getSendTime() {
    return sendTime;
  }

  /**
   * Sets the value of the 'sendTime' field.
   * @param value the value to set.
   */
  public void setSendTime(java.lang.Long value) {
    this.sendTime = value;
  }

  /**
   * Gets the value of the 'recordID' field.
   * @return The value of the 'recordID' field.
   */
  public java.lang.CharSequence getRecordID() {
    return recordID;
  }

  /**
   * Sets the value of the 'recordID' field.
   * @param value the value to set.
   */
  public void setRecordID(java.lang.CharSequence value) {
    this.recordID = value;
  }

  /**
   * Gets the value of the 'sendIp' field.
   * @return The value of the 'sendIp' field.
   */
  public java.lang.CharSequence getSendIp() {
    return sendIp;
  }

  /**
   * Sets the value of the 'sendIp' field.
   * @param value the value to set.
   */
  public void setSendIp(java.lang.CharSequence value) {
    this.sendIp = value;
  }

  /**
   * Gets the value of the 'datas' field.
   * @return The value of the 'datas' field.
   */
  public java.util.List<AvroInnerData> getDatas() {
    return datas;
  }

  /**
   * Sets the value of the 'datas' field.
   * @param value the value to set.
   */
  public void setDatas(java.util.List<AvroInnerData> value) {
    this.datas = value;
  }

  /**
   * Creates a new AvroMessageData RecordBuilder.
   * @return A new AvroMessageData RecordBuilder
   */
  public static AvroMessageData.Builder newBuilder() {
    return new AvroMessageData.Builder();
  }

  /**
   * Creates a new AvroMessageData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroMessageData RecordBuilder
   */
  public static AvroMessageData.Builder newBuilder(AvroMessageData.Builder other) {
    return new AvroMessageData.Builder(other);
  }

  /**
   * Creates a new AvroMessageData RecordBuilder by copying an existing AvroMessageData instance.
   * @param other The existing instance to copy.
   * @return A new AvroMessageData RecordBuilder
   */
  public static AvroMessageData.Builder newBuilder(AvroMessageData other) {
    return new AvroMessageData.Builder(other);
  }

  /**
   * RecordBuilder for AvroMessageData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroMessageData>
    implements org.apache.avro.data.RecordBuilder<AvroMessageData> {

    private long sendTime;
    private java.lang.CharSequence recordID;
    private java.lang.CharSequence sendIp;
    private java.util.List<AvroInnerData> datas;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(AvroMessageData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sendTime)) {
        this.sendTime = data().deepCopy(fields()[0].schema(), other.sendTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.recordID)) {
        this.recordID = data().deepCopy(fields()[1].schema(), other.recordID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sendIp)) {
        this.sendIp = data().deepCopy(fields()[2].schema(), other.sendIp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.datas)) {
        this.datas = data().deepCopy(fields()[3].schema(), other.datas);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroMessageData instance
     * @param other The existing instance to copy.
     */
    private Builder(AvroMessageData other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sendTime)) {
        this.sendTime = data().deepCopy(fields()[0].schema(), other.sendTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.recordID)) {
        this.recordID = data().deepCopy(fields()[1].schema(), other.recordID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.sendIp)) {
        this.sendIp = data().deepCopy(fields()[2].schema(), other.sendIp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.datas)) {
        this.datas = data().deepCopy(fields()[3].schema(), other.datas);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'sendTime' field.
      * @return The value.
      */
    public java.lang.Long getSendTime() {
      return sendTime;
    }

    /**
      * Sets the value of the 'sendTime' field.
      * @param value The value of 'sendTime'.
      * @return This builder.
      */
    public AvroMessageData.Builder setSendTime(long value) {
      validate(fields()[0], value);
      this.sendTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sendTime' field has been set.
      * @return True if the 'sendTime' field has been set, false otherwise.
      */
    public boolean hasSendTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sendTime' field.
      * @return This builder.
      */
    public AvroMessageData.Builder clearSendTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordID' field.
      * @return The value.
      */
    public java.lang.CharSequence getRecordID() {
      return recordID;
    }

    /**
      * Sets the value of the 'recordID' field.
      * @param value The value of 'recordID'.
      * @return This builder.
      */
    public AvroMessageData.Builder setRecordID(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.recordID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'recordID' field has been set.
      * @return True if the 'recordID' field has been set, false otherwise.
      */
    public boolean hasRecordID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'recordID' field.
      * @return This builder.
      */
    public AvroMessageData.Builder clearRecordID() {
      recordID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'sendIp' field.
      * @return The value.
      */
    public java.lang.CharSequence getSendIp() {
      return sendIp;
    }

    /**
      * Sets the value of the 'sendIp' field.
      * @param value The value of 'sendIp'.
      * @return This builder.
      */
    public AvroMessageData.Builder setSendIp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.sendIp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'sendIp' field has been set.
      * @return True if the 'sendIp' field has been set, false otherwise.
      */
    public boolean hasSendIp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'sendIp' field.
      * @return This builder.
      */
    public AvroMessageData.Builder clearSendIp() {
      sendIp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'datas' field.
      * @return The value.
      */
    public java.util.List<AvroInnerData> getDatas() {
      return datas;
    }

    /**
      * Sets the value of the 'datas' field.
      * @param value The value of 'datas'.
      * @return This builder.
      */
    public AvroMessageData.Builder setDatas(java.util.List<AvroInnerData> value) {
      validate(fields()[3], value);
      this.datas = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'datas' field has been set.
      * @return True if the 'datas' field has been set, false otherwise.
      */
    public boolean hasDatas() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'datas' field.
      * @return This builder.
      */
    public AvroMessageData.Builder clearDatas() {
      datas = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroMessageData build() {
      try {
        AvroMessageData record = new AvroMessageData();
        record.sendTime = fieldSetFlags()[0] ? this.sendTime : (java.lang.Long) defaultValue(fields()[0]);
        record.recordID = fieldSetFlags()[1] ? this.recordID : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.sendIp = fieldSetFlags()[2] ? this.sendIp : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.datas = fieldSetFlags()[3] ? this.datas : (java.util.List<AvroInnerData>) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroMessageData>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroMessageData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroMessageData>
    READER$ = (org.apache.avro.io.DatumReader<AvroMessageData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
